--------------------------------------------------------
--  DDL for Package Body TEST_PAACUMULAGESTIONES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "SCSISGES"."TEST_PAACUMULAGESTIONES" IS

   /* generated by utPLSQL for SQL Developer on 2019-04-29 18:04:42 */

   --
   -- test spacumulador case 1: ...
   --
   PROCEDURE spacumulador IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.spacumulador;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END spacumulador;

   --
   -- test spacumuladorxemp case 1: ...
   --
   PROCEDURE spacumuladorxemp IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.spacumuladorxemp;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END spacumuladorxemp;

   --
   -- test spacumuladorxsuc case 1: ...
   --
   PROCEDURE spacumuladorxsuc IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.spacumuladorxsuc;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END spacumuladorxsuc;

   --
   -- test spacumuladorxreg case 1: ...
   --
   PROCEDURE spacumuladorxreg IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.spacumuladorxreg;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END spacumuladorxreg;

   --
   -- test spacumuladorxzon case 1: ...
   --
   PROCEDURE spacumuladorxzon IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.spacumuladorxzon;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END spacumuladorxzon;

   --
   -- test spacumuladorxpais case 1: ...
   --
   PROCEDURE spacumuladorxpais IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.spacumuladorxpais;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END spacumuladorxpais;

   --
   -- test fngetpendientes case 1: ...
   --
   PROCEDURE fngetpendientes IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.fngetpendientes;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END fngetpendientes;

   --
   -- test fngetpresupuestos case 1: ...
   --
   PROCEDURE fngetpresupuestos IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.fngetpresupuestos;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END fngetpresupuestos;

   --
   -- test fngetsolicitudes case 1: ...
   --
   PROCEDURE fngetsolicitudes IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      -- paacumulagestiones.fngetsolicitudes;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END fngetsolicitudes;

END test_paacumulagestiones;

/
